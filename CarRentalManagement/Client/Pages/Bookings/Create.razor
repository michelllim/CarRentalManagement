@page "/bookings/create/"
@using CarRentalManagement.Shared.Domain;
@inject HttpClient _client
@inject NavigationManager _navManager

<h3 class="card-title">Create New Booking</h3>
<hr />
<br />

<EditForm Model="@booking" OnValidSubmit="CreateBooking">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Vehicle: </label>
        <div>
            <Create />
            <InputSelect @bind-Value="booking.VehicleID" class="form-control">
                <option value="">-- Select Vehicle --</option>
                @if (Vehicles != null)
                {
                    foreach (var vehicle in Vehicles)
                    {
                        <option value="@vehicle.Id">@vehicle.LicensePlateNumber</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => booking.VehicleID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Customer: </label>
        <div>
            <InputSelect @bind-Value="booking.CustomerID" class="form-control">
                <option value="">-- Select Customer --</option>
                @if (Customers != null)
                {
                    foreach (var customer in Customers)
                    {
                        <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => booking.CustomerID)" />
        </div>
    </div>

    <div class="form-group">
        <label>Date Out: </label>
        <div>
            <InputDate @bind-Value="@booking.DateOut" class="form-control" />
            <ValidationMessage For="@(() => booking.DateOut)" />
        </div>
    </div>

    <br />

    <button type="submit" class="btn btn-success btn-block">
        Create Booking
    </button>

</EditForm>


@code {
    Booking booking = new Booking();

    private IList<Vehicle>? Vehicles;
    private IList<Customer>? Customers;

    protected async override Task OnInitializedAsync()
    {
        Vehicles = await _client.GetFromJsonAsync<List<Vehicle>>($"{Endpoints.VehiclesEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }

    private async Task CreateBooking()
    {
        await _client.PostAsJsonAsync(Endpoints.BookingsEndpoint, booking);
        _navManager.NavigateTo("/bookings/");
    }

}